{
  "cells": [
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "# Augmentation\n",
        "import os\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator, img_to_array\n",
        "from PIL import Image\n",
        "import re\n",
        "\n",
        "train_military_dir = r\"D:\\Sasha - User\\Portsmouth University\\Study\\MODLES\\Masters Project\\DB\\Normal vs Military Vehicles\\train\\millitary\"\n",
        "output_dir = r\"D:\\Sasha - User\\Portsmouth University\\Study\\MODLES\\Masters Project\\DB\\Normal vs Military Vehicles\\train\\00\"\n",
        "\n",
        "datagen = ImageDataGenerator(\n",
        "    rotation_range=20,\n",
        "    width_shift_range=0.2,\n",
        "    height_shift_range=0.2,\n",
        "    shear_range=0.2,\n",
        "    zoom_range=0.2,\n",
        "    horizontal_flip=True,\n",
        "    fill_mode='nearest')\n",
        "\n",
        "def prepare_image(img_path, target_size=(256, 256), color_mode='RGB'):\n",
        "    img = Image.open(img_path)\n",
        "\n",
        "    img = img.resize(target_size, Image.Resampling.LANCZOS)\n",
        "    if img.mode != color_mode:\n",
        "        img = img.convert(color_mode)\n",
        "\n",
        "    return img\n",
        "\n",
        "def extract_number(filename):\n",
        "    match = re.search(r'(\\d+)', filename)\n",
        "    return int(match.group(1)) if match else -1\n",
        "\n",
        "existing_files = os.listdir(output_dir)\n",
        "print(f\"Существующих файлов в папке {output_dir}: {len(existing_files)}\")\n",
        "\n",
        "image_list = os.listdir(train_military_dir)\n",
        "\n",
        "image_list.sort(key=extract_number, reverse=True)\n",
        "\n",
        "print(image_list[:20])\n",
        "\n",
        "augmentations_needed = 1381\n",
        "augment_count = 0\n",
        "\n",
        "for img_name in image_list:\n",
        "    img_path = os.path.join(train_military_dir, img_name)\n",
        "    img = prepare_image(img_path)\n",
        "    if img is None:\n",
        "        continue\n",
        "\n",
        "    x = img_to_array(img)\n",
        "    x = x.reshape((1,) + x.shape)\n",
        "\n",
        "    if augment_count < augmentations_needed:\n",
        "        for batch in datagen.flow(x, batch_size=1, save_to_dir=output_dir, save_prefix='aug', save_format='jpeg'):\n",
        "            augment_count += 1\n",
        "            print(f\"Сгенерировано изображение: {augment_count}, исходный файл: {img_name}\")\n",
        "            break\n",
        "\n",
        "    if augment_count >= augmentations_needed:\n",
        "        break\n",
        "\n",
        "print(f\"Сохранено {augment_count} аугментированных изображений в {output_dir}\")\n",
        "\n",
        "final_file_count = os.listdir(output_dir)\n",
        "print(f\"Всего файлов в директории {output_dir}: {len(final_file_count)}\")."
      ],
      "metadata": {
        "id": "9150d27ed4fc1fa3"
      },
      "id": "9150d27ed4fc1fa3",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5388d1659319a6f7"
      },
      "outputs": [],
      "source": [],
      "id": "5388d1659319a6f7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e29e87a4a691cabf"
      },
      "outputs": [],
      "source": [
        "# Base model ResNet50\n",
        "\n",
        "import os\n",
        "import time\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from PIL import Image, UnidentifiedImageError\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D\n",
        "from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "from tensorflow.keras.regularizers import l2\n",
        "\n",
        "train_dir = \"Normal vs Military Vehicles/train\"\n",
        "val_dir = \"Normal vs Military Vehicles/validation\"\n",
        "test_dir = \"Normal vs Military Vehicles/test\"\n",
        "\n",
        "weights_path = \"resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\"\n",
        "\n",
        "def safe_load_img(filepath, target_size):\n",
        "    try:\n",
        "        img = Image.open(filepath)\n",
        "        img = img.convert(\"RGB\")\n",
        "        img = img.resize(target_size)\n",
        "        return img\n",
        "    except (UnidentifiedImageError, OSError, ValueError) as e:\n",
        "        print(f\"Skipping corrupted image: {filepath} ({e})\")\n",
        "        return None\n",
        "\n",
        "def get_data_generators(train_dir, val_dir, test_dir, image_size=224, batch_size=16):\n",
        "    data_generator = ImageDataGenerator(preprocessing_function=preprocess_input)\n",
        "\n",
        "    def safe_flow_from_directory(directory):\n",
        "        valid_files = []\n",
        "        for root, _, files in os.walk(directory):\n",
        "            for file in files:\n",
        "                filepath = os.path.join(root, file)\n",
        "                if safe_load_img(filepath, target_size=(image_size, image_size)) is not None:\n",
        "                    valid_files.append(filepath)\n",
        "\n",
        "        return data_generator.flow_from_directory(\n",
        "            directory,\n",
        "            target_size=(image_size, image_size),\n",
        "            batch_size=batch_size,\n",
        "            class_mode='categorical'\n",
        "        )\n",
        "\n",
        "    train_generator = safe_flow_from_directory(train_dir)\n",
        "    validation_generator = safe_flow_from_directory(val_dir)\n",
        "    test_generator = safe_flow_from_directory(test_dir)\n",
        "\n",
        "    return train_generator, validation_generator, test_generator\n",
        "\n",
        "train_generator, validation_generator, test_generator = get_data_generators(train_dir, val_dir, test_dir)\n",
        "\n",
        "def build_resnet50_model(input_shape=(224, 224, 3)):\n",
        "    base_model = ResNet50(include_top=False, weights=weights_path, input_shape=input_shape)\n",
        "    base_model.trainable = False\n",
        "    model = Sequential()\n",
        "    model.add(base_model)\n",
        "    model.add(GlobalAveragePooling2D())\n",
        "    model.add(Dense(512, activation='relu', kernel_regularizer=l2(0.001)))\n",
        "    model.add(Dropout(0.5))\n",
        "    model.add(Dense(2, activation='softmax')) )\n",
        "\n",
        "    return model\n",
        "\n",
        "model = build_resnet50_model()\n",
        "\n",
        "\n",
        "optimizer = Adam(learning_rate=0.001)\n",
        "model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "history = model.fit(\n",
        "    train_generator,\n",
        "    steps_per_epoch=len(train_generator),\n",
        "    epochs=30,\n",
        "    validation_data=validation_generator,\n",
        "    validation_steps=len(validation_generator),\n",
        "    callbacks=[early_stopping],\n",
        "\n",
        ")\n",
        "\n",
        "end_time = time.time()\n",
        "training_time_seconds = end_time - start_time\n",
        "training_time_minutes = training_time_seconds / 60\n",
        "\n",
        "print(f\"Total training time: {training_time_seconds:.2f} seconds ({training_time_minutes:.2f} minutes)\")\n"
      ],
      "id": "e29e87a4a691cabf"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "b3f2e76862b1d44"
      },
      "outputs": [],
      "source": [
        "results = model.evaluate(test_generator)\n",
        "print(f\"Test Accuracy: {results[1]:.4f}\")\n",
        "\n",
        "model.save(\"ResNet50_model_01.h5\")"
      ],
      "id": "b3f2e76862b1d44"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bb26046dfb5d65e1"
      },
      "outputs": [],
      "source": [
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "id": "bb26046dfb5d65e1"
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.applications.resnet50 import preprocess_input\n",
        "import numpy as np\n",
        "from sklearn.metrics import classification_report, roc_auc_score\n",
        "import os\n",
        "\n",
        "test_dir = r\"D:\\Sasha - User\\Portsmouth University\\Study\\MODLES\\Masters Project\\DB\\Normal vs Military Vehicles\\test\"\n",
        "\n",
        "data_generator = ImageDataGenerator(preprocessing_function=preprocess_input)\n",
        "\n",
        "test_generator = data_generator.flow_from_directory(\n",
        "    test_dir,\n",
        "    target_size=(224, 224),\n",
        "    batch_size=16,\n",
        "    class_mode='categorical',\n",
        "    shuffle=False\n",
        ")\n",
        "\n",
        "model = load_model('ResNet50_model_01.h5')\n",
        "\n",
        "y_true = test_generator.classes\n",
        "\n",
        "y_pred = model.predict(test_generator)\n",
        "\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "\n",
        "print(classification_report(y_true, y_pred_classes))\n",
        "\n",
        "roc_auc = roc_auc_score(y_true, y_pred[:, 1])\n",
        "print(f'ROC-AUC: {roc_auc}')"
      ],
      "metadata": {
        "id": "5f6cd024f4b1e61a"
      },
      "id": "5f6cd024f4b1e61a",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "from tensorflow.keras.applications.vgg16 import preprocess_input\n",
        "from tensorflow.keras.models import load_model\n",
        "import requests\n",
        "from io import BytesIO\n",
        "from PIL import Image, UnidentifiedImageError\n",
        "\n",
        "class_counts = {\"military\": 0, \"other\": 0}\n",
        "\n",
        "def classify_image(source, model, from_url=False):\n",
        "    try:\n",
        "        if from_url:\n",
        "            response = requests.get(source)\n",
        "            if 'image' not in response.headers['Content-Type']:\n",
        "                return\n",
        "\n",
        "            img_data = BytesIO(response.content)\n",
        "            img = Image.open(img_data)\n",
        "        else:\n",
        "            img = Image.open(source)\n",
        "\n",
        "        img = img.resize((224, 224))\n",
        "        preprocessed_img = preprocess_input(np.expand_dims(img_to_array(img), axis=0))\n",
        "\n",
        "        preds = model.predict(preprocessed_img)\n",
        "        class_labels = [\"military\", \"other\"]\n",
        "        predicted_class = class_labels[np.argmax(preds[0])]\n",
        "\n",
        "        class_counts[predicted_class] += 1\n",
        "\n",
        "        plt.figure(figsize=(6, 6))\n",
        "        plt.imshow(img)\n",
        "        plt.title(f\"Predicted Class: {predicted_class}\\n{preds}\")\n",
        "        plt.axis('off')\n",
        "        plt.show()\n",
        "\n",
        "    except Exception:\n",
        "        pass\n",
        "\n",
        "\n",
        "model = load_model(\"ResNet50_model_01.h5\")"
      ],
      "metadata": {
        "id": "d9d264d59ce3bc6f"
      },
      "id": "d9d264d59ce3bc6f",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "b5adba721210dbb6"
      },
      "outputs": [],
      "source": [
        "image_urls = [\n",
        "    \"https://www.rbc.ua/static/img/_/v/_vnochi_foto_vidkriti_dzherela_jpg1_3bdd69c775f07b31c72ed092b6fde0ef_1200x675.jpg\",\n",
        "    \"https://pbs.twimg.com/media/GJ1qMw4XYAEb55g?format=jpg&name=large\",\n",
        "    \"https://pbs.twimg.com/media/GJ1qO2dXwAAUeLb?format=jpg&name=large\",\n",
        "    \"https://pbs.twimg.com/media/GJ1qRalXcAARTcg?format=jpg&name=large\",\n",
        "    \"https://static.nv.ua/shared/system/Article/posters/002/863/912/original/457019c90cdd596466eddfa4d14690b6.jpg?q=85&stamp=20240411114700&w=900&f=webp\",\n",
        "    \"https://www.telegraph.co.uk/content/dam/world-news/2024/01/09/TELEMMGLPICT000362055377_17047957227510_trans_NvBQzQNjv4BqA7a2BP2KFPtZUOepzpZgXPmJDQle8zhAnRj3nA8oxTY.jpeg?imwidth=960\",\n",
        "    \"https://financialtribune.com/sites/default/files/styles/slideshow/public/field/image/ordi/03-Mosul%20Operation%20%28Lead%29.jpg?itok=5rLlShJv&c=5e827ffe7b21697aea07d11aabaf2c29\",\n",
        "    \"https://images.kienthuc.net.vn/zoomh/800/uploaded/lenam/2016_01_20/phien-quan-is/phien-quan-is-bo-tay-hoan-toan-truoc-may-bay-nga-Hinh-3.jpg\",\n",
        "    \"https://images.kienthuc.net.vn/zoomh/800/uploaded/lenam/2016_01_20/phien-quan-is/phien-quan-is-bo-tay-hoan-toan-truoc-may-bay-nga-Hinh-4.jpg\",\n",
        "    \"https://vesti-ua.net/uploads/posts/2023-05/1683885553_imgonline_com_ua_resize_hw7vrczamfqfv_650x410.jpg\",\n",
        "    \"https://mvs.gov.ua/upload/1/7/9/2/7/2/mceu-78158512061707836612027.jpg\",\n",
        "    \"https://mvs.gov.ua/upload/1/7/9/2/6/8/mceu-83735056321707836253435.jpg\",\n",
        "    \"https://mvs.gov.ua/upload/1/7/9/2/6/7/mceu-51095692011707836227352.jpg\",\n",
        "    \"https://armyrecognition.com/images/stories/conflict/russia_invasion_ukraine/Ukraine_develops_launcher_vehicle_able_to_fire_Brimstone_missile_capable_to_destroy_Russian_tanks_925_002.jpg\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/0c/Russia_Receives_Over_200_Fath_360_Ballistic_Missiles_from_Iran_925_001-0c7c14a3.webp\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/28/Ukraine_Uses_Spanish_Guardian_1.5_Remote_Weapon_Stations_Mounted_on_TOA_M113_and_Kozak-5_Armored_Personnel_Carriers-2849b14c.webp\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/22/Russia_to_deploy_new_unmanned_MTS-15_Klever_122_mm_self-propelled_howitzer_in_Ukraine_925_001-22d51b15.webp\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/18/Ukraine_Deploys_South_African_Mbombe_6_Armored_Vehicles_Fitted_with_Locally_Developed_BM-5_Turret-183fa6ba.webp\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/5d/Czech-made_inflatable_decoy_tricks_Russian_strike_forces_in_Ukraine_925_001-5daca767.webp\",\n",
        "    \"https://scontent.fsou1-1.fna.fbcdn.net/v/t39.30808-6/326033558_740192270867090_1523910617596208613_n.jpg?_nc_cat=111&ccb=1-7&_nc_sid=127cfc&_nc_ohc=epNh5iDIwzkQ7kNvgE0Q0p2&_nc_ht=scontent.fsou1-1.fna&oh=00_AYDtejv7XLuYBiWTTUgpgb4vjjHp4uka8q07toGGJz8JBA&oe=66E3C1AB\",\n",
        "    \"https://scontent.fsou1-1.fna.fbcdn.net/v/t39.30808-6/309007166_2450455041769735_4301901146677547733_n.jpg?_nc_cat=111&ccb=1-7&_nc_sid=127cfc&_nc_ohc=PNM_LPcCFpcQ7kNvgFZlOkI&_nc_ht=scontent.fsou1-1.fna&oh=00_AYByLNLtV4ntOwZfDXq11TM9PiTvJf03ceSsZQnJz9d8_w&oe=66E3C380\",\n",
        "    \"https://pbs.twimg.com/media/EL6xlZ7XUAAT4gk?format=jpg&name=medium\",\n",
        "    \"https://scontent.fsou1-1.fna.fbcdn.net/v/t39.30808-6/326137297_1375627256542206_4500533641333634443_n.jpg?_nc_cat=104&ccb=1-7&_nc_sid=127cfc&_nc_ohc=hMG_U87t_j8Q7kNvgENwYaa&_nc_ht=scontent.fsou1-1.fna&oh=00_AYAIVblA9-mAhDegrkwq9_dgr6n3Xc9x_6RSBfjnccTFZg&oe=66E3D0DC\",\n",
        "    \"https://cdn4.suspilne.media/images/resize/952x1.78/202a2b223061eccc.jpg\"\n",
        "]\n",
        "\n",
        "for url in image_urls:\n",
        "    classify_image(url, model, from_url=True)\n",
        "\n",
        "\n",
        "print(f\"Количество изображений класса 'military': {class_counts['military']}\")\n",
        "print(f\"Количество изображений класса 'other': {class_counts['other']}\")"
      ],
      "id": "b5adba721210dbb6"
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "image_urls = [\n",
        "    \"https://gdb.rferl.org/049b0000-0aff-0242-7385-08da1613f320_w408_r1_s.jpg\",\n",
        "    \"https://newscdn.meta.ua/pics/22/53/2253754-0_360x400.webp\",\n",
        "    \"https://im.kommersant.ru/Issues.photo/CORP/2022/02/24/KMO_141501_08820_1_t222_151046.jpg\",\n",
        "    \"https://www.washingtonpost.com/wp-apps/imrs.php?src=https://arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/QV2QPN3AA3HVZKY5KTQ2XE2O3E_size-normalized.jpg&w=1440&impolicy=high_res\",\n",
        "    \"https://cdn-images.fleetnews.co.uk/thumbs/960x960/web-clean/2/root/img-20160614-094707.jpg\",\n",
        "    \"https://static.probuildermag.co.uk/professional-builder/uploads/tipper-truck.jpg\",\n",
        "    \"https://fncdn.blob.core.windows.net/web-clean/2/root/128513-isuzu_w555_h555.jpg\",\n",
        "    \"https://www.tgs-group.com/userfiles/product_image/.thumbnail/58f5d3955389a-20170126-111711.jpg\",\n",
        "    \"https://classicsworld.co.uk/wp-content/uploads/sites/6/2018/05/Peugeot-504-pick-up.jpg?w=900\",\n",
        "    \"https://thumbs.worthpoint.com/zoom/images1/1/0709/12/peugeot-404-pick-sales-brochure-book_1_1f117fc348036832e4b82f609703bee4.jpg\",\n",
        "    \"https://www.pickupsdirect.co.uk/images/img-01.jpg\",\n",
        "    \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRoJZMu7pVPEsuz96VFHV7iE5-jz5sAh-1aKeBktui45T_uz-9UGDb4c7QLYofosVTCVaw&usqp=CAU\",\n",
        "    \"https://www.autocar.co.uk/sites/autocar.co.uk/files/styles/body-image/public/ineos-grenadier_quartermaster-top-10.jpg?itok=CCTmncUM\",\n",
        "    \"https://www.p11dorganiser.co.uk/wp-content/uploads/2024/02/pickup.png\",\n",
        "    \"https://businessvans.co.uk/wp-content/uploads/2017/04/Isuzu-D-Max-on-building-site.jpg\",\n",
        "    \"https://i.ebayimg.com/thumbs/images/g/Z9IAAOSwEj9m0JVT/s-l1200.jpg\",\n",
        "    \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQBZnvblf4Ar60Wq1EzSUknz6wS7u0BFbZlUw&s\",\n",
        "    \"https://tcct.com/wp-content/uploads/2021/07/1-1.jpeg\",\n",
        "    \"https://evpowered.co.uk/wp-content/uploads/2024/06/2024_Toyota_Hilux_FCEV_Prototype_DPL_Static_005-scaled.jpg\",\n",
        "    \"https://i.pinimg.com/236x/90/32/33/90323341e88c9d768eca2a42f640ef93.jpg\",\n",
        "    \"https://professionalpickup.com/wp-content/uploads/2024/08/Toyota-Hilux-ARB-2024-Professional-Pickup-01-695x391.webp\",\n",
        "    \"https://ullsteinconcepts.com/ullsteinconcepts/CustomUpload/374O357O340O370O356O369O350O332O352O360O338O371O366O365O356O326O364O353O327O/Sonder_Solution_Camping_Mitsubishi_L200_Explorer_8.jpg\",\n",
        "    \"https://www.truck1.eu/img/Van_Toyota_Land_Cruiser_NEW_MODEL_HZJ79_4x4_4_2D_Double_Cab_EURO_3_NEW_20_UNITS_directly_available-xxl-40425/40425_2889962895578.jpg\",\n",
        "    \"https://media.autoexpress.co.uk/image/private/s--r-_KK3Fc--/f_auto,t_primary-image-desktop@1/v1562251652/autoexpress/images/car_photo_276465.jpg\"\n",
        "]\n",
        "\n",
        "for url in image_urls:\n",
        "    classify_image(url, model, from_url=True)\n",
        "\n",
        "print(f\"Количество изображений класса 'military': {class_counts['military']}\")\n",
        "print(f\"Количество изображений класса 'other': {class_counts['other']}\")"
      ],
      "metadata": {
        "id": "58bbb432b6a28efe"
      },
      "id": "58bbb432b6a28efe",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "402213d3e557d706"
      },
      "id": "402213d3e557d706",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "# SECOND MODEL"
      ],
      "metadata": {
        "id": "410db8b099cc5f68"
      },
      "id": "410db8b099cc5f68",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "import os\n",
        "import time\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from PIL import Image, UnidentifiedImageError\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D, BatchNormalization\n",
        "from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.optimizers import SGD\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
        "from tensorflow.keras.regularizers import l2\n",
        "from sklearn.metrics import classification_report, roc_auc_score\n",
        "\n",
        "train_dir = \"/content/Normal vs Military Vehicles/train\"\n",
        "val_dir = \"/content/Normal vs Military Vehicles/validation\"\n",
        "test_dir = \"/content/Normal vs Military Vehicles/test\"\n",
        "\n",
        "weights_path = \"/content/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\"\n",
        "\n",
        "def safe_load_img(filepath, target_size):\n",
        "    try:\n",
        "        img = Image.open(filepath)\n",
        "        img = img.convert(\"RGB\")\n",
        "        img = img.resize(target_size)\n",
        "        return img\n",
        "    except (UnidentifiedImageError, OSError, ValueError) as e:\n",
        "        print(f\"Skipping corrupted image: {filepath} ({e})\")\n",
        "        return None\n",
        "\n",
        "def get_data_generators(train_dir, val_dir, test_dir, image_size=224, batch_size=16):\n",
        "    data_generator = ImageDataGenerator(\n",
        "        preprocessing_function=preprocess_input,\n",
        "        rotation_range=40,\n",
        "        width_shift_range=0.3,\n",
        "        height_shift_range=0.3,\n",
        "        shear_range=0.3,\n",
        "        zoom_range=0.3,\n",
        "        horizontal_flip=True,\n",
        "        fill_mode='nearest'\n",
        "    )\n",
        "\n",
        "    train_generator = data_generator.flow_from_directory(\n",
        "        train_dir,\n",
        "        target_size=(image_size, image_size),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical'\n",
        "    )\n",
        "\n",
        "    val_generator = data_generator.flow_from_directory(\n",
        "        val_dir,\n",
        "        target_size=(image_size, image_size),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical'\n",
        "    )\n",
        "\n",
        "    test_generator = data_generator.flow_from_directory(\n",
        "        test_dir,\n",
        "        target_size=(image_size, image_size),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical',\n",
        "        shuffle=False\n",
        "    )\n",
        "\n",
        "    return train_generator, val_generator, test_generator\n",
        "\n",
        "train_generator, validation_generator, test_generator = get_data_generators(train_dir, val_dir, test_dir)\n",
        "\n",
        "def build_resnet50_model(input_shape=(224, 224, 3)):\n",
        "    base_model = ResNet50(include_top=False, weights=weights_path, input_shape=input_shape)\n",
        "\n",
        "    for layer in base_model.layers[-20:]:\n",
        "        layer.trainable = True\n",
        "\n",
        "    model = Sequential()\n",
        "    model.add(base_model)\n",
        "    model.add(GlobalAveragePooling2D())\n",
        "    model.add(BatchNormalization())\n",
        "    model.add(Dense(512, activation='relu', kernel_regularizer=l2(0.001)))\n",
        "    model.add(Dropout(0.5))\n",
        "    model.add(Dense(2, activation='softmax'))\n",
        "\n",
        "    return model\n",
        "\n",
        "model = build_resnet50_model()\n",
        "\n",
        "optimizer = SGD(learning_rate=0.001, momentum=0.9, nesterov=True)\n",
        "\n",
        "model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=1e-6, verbose=1)\n",
        "\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "steps_per_epoch = train_generator.n // train_generator.batch_size\n",
        "validation_steps = validation_generator.n // validation_generator.batch_size\n",
        "\n",
        "history = model.fit(\n",
        "    train_generator,\n",
        "    steps_per_epoch=steps_per_epoch,\n",
        "    epochs=50,\n",
        "    validation_data=validation_generator,\n",
        "    validation_steps=validation_steps,\n",
        "    callbacks=[early_stopping, reduce_lr],\n",
        "\n",
        ")\n",
        "\n",
        "end_time = time.time()\n",
        "training_time_seconds = end_time - start_time\n",
        "training_time_minutes = training_time_seconds / 60\n",
        "\n",
        "print(f\"Total training time: {training_time_seconds:.2f} seconds ({training_time_minutes:.2f} minutes)\")\n",
        "\n",
        "model.save(\"ResNet50_model_02.h5\")"
      ],
      "metadata": {
        "id": "4bdf01704def68fc"
      },
      "id": "4bdf01704def68fc",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "results = model.evaluate(test_generator)\n",
        "print(f\"Test Accuracy: {results[1]:.4f}\")\n",
        "\n",
        "y_true = test_generator.classes\n",
        "\n",
        "y_pred = model.predict(test_generator)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "\n",
        "print(classification_report(y_true, y_pred_classes))\n",
        "\n",
        "roc_auc = roc_auc_score(y_true, y_pred[:, 1])\n",
        "print(f'ROC-AUC: {roc_auc}')\n",
        "\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "lr = model.optimizer.learning_rate.numpy()\n",
        "plt.plot(history.epoch, [lr * (0.5**i) for i in range(len(history.epoch))], label='Learning Rate')\n",
        "plt.title('Learning Rate Over Epochs')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Learning Rate')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "4e7ee34a4379bf11"
      },
      "id": "4e7ee34a4379bf11",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.preprocessing.image import img_to_array\n",
        "from tensorflow.keras.applications.vgg16 import preprocess_input\n",
        "from tensorflow.keras.models import load_model\n",
        "import requests\n",
        "from io import BytesIO\n",
        "from PIL import Image, UnidentifiedImageError\n",
        "\n",
        "class_counts = {\"military\": 0, \"other\": 0}\n",
        "\n",
        "def classify_image(source, model, from_url=False):\n",
        "    try:\n",
        "        if from_url:\n",
        "            response = requests.get(source)\n",
        "            if 'image' not in response.headers['Content-Type']:\n",
        "                return\n",
        "\n",
        "            img_data = BytesIO(response.content)\n",
        "            img = Image.open(img_data)\n",
        "        else:\n",
        "            img = Image.open(source)\n",
        "\n",
        "        img = img.resize((224, 224))\n",
        "        preprocessed_img = preprocess_input(np.expand_dims(img_to_array(img), axis=0))\n",
        "\n",
        "        preds = model.predict(preprocessed_img)\n",
        "        class_labels = [\"military\", \"other\"]\n",
        "        predicted_class = class_labels[np.argmax(preds[0])]\n",
        "\n",
        "        class_counts[predicted_class] += 1\n",
        "\n",
        "        plt.figure(figsize=(6, 6))\n",
        "        plt.imshow(img)\n",
        "        plt.title(f\"Predicted Class: {predicted_class}\\n{preds}\")\n",
        "        plt.axis('off')\n",
        "        plt.show()\n",
        "\n",
        "    except Exception:\n",
        "        pass\n",
        "\n",
        "\n",
        "model = load_model(\"ResNet50_model_02.h5\")"
      ],
      "metadata": {
        "id": "b32ad098c4b8421e"
      },
      "id": "b32ad098c4b8421e",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "image_urls = [\n",
        "    \"https://www.rbc.ua/static/img/_/v/_vnochi_foto_vidkriti_dzherela_jpg1_3bdd69c775f07b31c72ed092b6fde0ef_1200x675.jpg\",\n",
        "    \"https://pbs.twimg.com/media/GJ1qMw4XYAEb55g?format=jpg&name=large\",\n",
        "    \"https://pbs.twimg.com/media/GJ1qO2dXwAAUeLb?format=jpg&name=large\",\n",
        "    \"https://pbs.twimg.com/media/GJ1qRalXcAARTcg?format=jpg&name=large\",\n",
        "    \"https://static.nv.ua/shared/system/Article/posters/002/863/912/original/457019c90cdd596466eddfa4d14690b6.jpg?q=85&stamp=20240411114700&w=900&f=webp\",\n",
        "    \"https://www.telegraph.co.uk/content/dam/world-news/2024/01/09/TELEMMGLPICT000362055377_17047957227510_trans_NvBQzQNjv4BqA7a2BP2KFPtZUOepzpZgXPmJDQle8zhAnRj3nA8oxTY.jpeg?imwidth=960\",\n",
        "    \"https://financialtribune.com/sites/default/files/styles/slideshow/public/field/image/ordi/03-Mosul%20Operation%20%28Lead%29.jpg?itok=5rLlShJv&c=5e827ffe7b21697aea07d11aabaf2c29\",\n",
        "    \"https://images.kienthuc.net.vn/zoomh/800/uploaded/lenam/2016_01_20/phien-quan-is/phien-quan-is-bo-tay-hoan-toan-truoc-may-bay-nga-Hinh-3.jpg\",\n",
        "    \"https://images.kienthuc.net.vn/zoomh/800/uploaded/lenam/2016_01_20/phien-quan-is/phien-quan-is-bo-tay-hoan-toan-truoc-may-bay-nga-Hinh-4.jpg\",\n",
        "    \"https://vesti-ua.net/uploads/posts/2023-05/1683885553_imgonline_com_ua_resize_hw7vrczamfqfv_650x410.jpg\",\n",
        "    \"https://mvs.gov.ua/upload/1/7/9/2/7/2/mceu-78158512061707836612027.jpg\",\n",
        "    \"https://mvs.gov.ua/upload/1/7/9/2/6/8/mceu-83735056321707836253435.jpg\",\n",
        "    \"https://mvs.gov.ua/upload/1/7/9/2/6/7/mceu-51095692011707836227352.jpg\",\n",
        "    \"https://armyrecognition.com/images/stories/conflict/russia_invasion_ukraine/Ukraine_develops_launcher_vehicle_able_to_fire_Brimstone_missile_capable_to_destroy_Russian_tanks_925_002.jpg\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/0c/Russia_Receives_Over_200_Fath_360_Ballistic_Missiles_from_Iran_925_001-0c7c14a3.webp\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/28/Ukraine_Uses_Spanish_Guardian_1.5_Remote_Weapon_Stations_Mounted_on_TOA_M113_and_Kozak-5_Armored_Personnel_Carriers-2849b14c.webp\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/22/Russia_to_deploy_new_unmanned_MTS-15_Klever_122_mm_self-propelled_howitzer_in_Ukraine_925_001-22d51b15.webp\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/18/Ukraine_Deploys_South_African_Mbombe_6_Armored_Vehicles_Fitted_with_Locally_Developed_BM-5_Turret-183fa6ba.webp\",\n",
        "    \"https://armyrecognition.com/templates/yootheme/cache/5d/Czech-made_inflatable_decoy_tricks_Russian_strike_forces_in_Ukraine_925_001-5daca767.webp\",\n",
        "    \"https://scontent.fsou1-1.fna.fbcdn.net/v/t39.30808-6/326033558_740192270867090_1523910617596208613_n.jpg?_nc_cat=111&ccb=1-7&_nc_sid=127cfc&_nc_ohc=epNh5iDIwzkQ7kNvgE0Q0p2&_nc_ht=scontent.fsou1-1.fna&oh=00_AYDtejv7XLuYBiWTTUgpgb4vjjHp4uka8q07toGGJz8JBA&oe=66E3C1AB\",\n",
        "    \"https://scontent.fsou1-1.fna.fbcdn.net/v/t39.30808-6/309007166_2450455041769735_4301901146677547733_n.jpg?_nc_cat=111&ccb=1-7&_nc_sid=127cfc&_nc_ohc=PNM_LPcCFpcQ7kNvgFZlOkI&_nc_ht=scontent.fsou1-1.fna&oh=00_AYByLNLtV4ntOwZfDXq11TM9PiTvJf03ceSsZQnJz9d8_w&oe=66E3C380\",\n",
        "    \"https://pbs.twimg.com/media/EL6xlZ7XUAAT4gk?format=jpg&name=medium\",\n",
        "    \"https://scontent.fsou1-1.fna.fbcdn.net/v/t39.30808-6/326137297_1375627256542206_4500533641333634443_n.jpg?_nc_cat=104&ccb=1-7&_nc_sid=127cfc&_nc_ohc=hMG_U87t_j8Q7kNvgENwYaa&_nc_ht=scontent.fsou1-1.fna&oh=00_AYAIVblA9-mAhDegrkwq9_dgr6n3Xc9x_6RSBfjnccTFZg&oe=66E3D0DC\",\n",
        "    \"https://cdn4.suspilne.media/images/resize/952x1.78/202a2b223061eccc.jpg\"\n",
        "]\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "for url in image_urls:\n",
        "    classify_image(url, model, from_url=True)\n",
        "\n",
        "print(f\"Количество изображений класса 'military': {class_counts['military']}\")\n",
        "print(f\"Количество изображений класса 'other': {class_counts['other']}\")"
      ],
      "metadata": {
        "id": "9b4ee368f4c9cd77"
      },
      "id": "9b4ee368f4c9cd77",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "image_urls = [\n",
        "    \"https://gdb.rferl.org/049b0000-0aff-0242-7385-08da1613f320_w408_r1_s.jpg\",\n",
        "    \"https://newscdn.meta.ua/pics/22/53/2253754-0_360x400.webp\",\n",
        "    \"https://im.kommersant.ru/Issues.photo/CORP/2022/02/24/KMO_141501_08820_1_t222_151046.jpg\",\n",
        "    \"https://www.washingtonpost.com/wp-apps/imrs.php?src=https://arc-anglerfish-washpost-prod-washpost.s3.amazonaws.com/public/QV2QPN3AA3HVZKY5KTQ2XE2O3E_size-normalized.jpg&w=1440&impolicy=high_res\",\n",
        "    \"https://cdn-images.fleetnews.co.uk/thumbs/960x960/web-clean/2/root/img-20160614-094707.jpg\",\n",
        "    \"https://static.probuildermag.co.uk/professional-builder/uploads/tipper-truck.jpg\",\n",
        "    \"https://fncdn.blob.core.windows.net/web-clean/2/root/128513-isuzu_w555_h555.jpg\",\n",
        "    \"https://www.tgs-group.com/userfiles/product_image/.thumbnail/58f5d3955389a-20170126-111711.jpg\",\n",
        "    \"https://classicsworld.co.uk/wp-content/uploads/sites/6/2018/05/Peugeot-504-pick-up.jpg?w=900\",\n",
        "    \"https://thumbs.worthpoint.com/zoom/images1/1/0709/12/peugeot-404-pick-sales-brochure-book_1_1f117fc348036832e4b82f609703bee4.jpg\",\n",
        "    \"https://www.pickupsdirect.co.uk/images/img-01.jpg\",\n",
        "    \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRoJZMu7pVPEsuz96VFHV7iE5-jz5sAh-1aKeBktui45T_uz-9UGDb4c7QLYofosVTCVaw&usqp=CAU\",\n",
        "    \"https://www.autocar.co.uk/sites/autocar.co.uk/files/styles/body-image/public/ineos-grenadier_quartermaster-top-10.jpg?itok=CCTmncUM\",\n",
        "    \"https://www.p11dorganiser.co.uk/wp-content/uploads/2024/02/pickup.png\",\n",
        "    \"https://businessvans.co.uk/wp-content/uploads/2017/04/Isuzu-D-Max-on-building-site.jpg\",\n",
        "    \"https://i.ebayimg.com/thumbs/images/g/Z9IAAOSwEj9m0JVT/s-l1200.jpg\",\n",
        "    \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQBZnvblf4Ar60Wq1EzSUknz6wS7u0BFbZlUw&s\",\n",
        "    \"https://tcct.com/wp-content/uploads/2021/07/1-1.jpeg\",\n",
        "    \"https://evpowered.co.uk/wp-content/uploads/2024/06/2024_Toyota_Hilux_FCEV_Prototype_DPL_Static_005-scaled.jpg\",\n",
        "    \"https://i.pinimg.com/236x/90/32/33/90323341e88c9d768eca2a42f640ef93.jpg\",\n",
        "    \"https://professionalpickup.com/wp-content/uploads/2024/08/Toyota-Hilux-ARB-2024-Professional-Pickup-01-695x391.webp\",\n",
        "    \"https://ullsteinconcepts.com/ullsteinconcepts/CustomUpload/374O357O340O370O356O369O350O332O352O360O338O371O366O365O356O326O364O353O327O/Sonder_Solution_Camping_Mitsubishi_L200_Explorer_8.jpg\",\n",
        "    \"https://www.truck1.eu/img/Van_Toyota_Land_Cruiser_NEW_MODEL_HZJ79_4x4_4_2D_Double_Cab_EURO_3_NEW_20_UNITS_directly_available-xxl-40425/40425_2889962895578.jpg\",\n",
        "    \"https://media.autoexpress.co.uk/image/private/s--r-_KK3Fc--/f_auto,t_primary-image-desktop@1/v1562251652/autoexpress/images/car_photo_276465.jpg\"\n",
        "]\n",
        "\n",
        "\n",
        "for url in image_urls:\n",
        "    classify_image(url, model, from_url=True)\n",
        "\n",
        "print(f\"Количество изображений класса 'military': {class_counts['military']}\")\n",
        "print(f\"Количество изображений класса 'other': {class_counts['other']}\")"
      ],
      "metadata": {
        "id": "e8d254ba01ba8cc5"
      },
      "id": "e8d254ba01ba8cc5",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "d13b56f4de839ce4"
      },
      "id": "d13b56f4de839ce4",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "# THIRD MODEL"
      ],
      "metadata": {
        "id": "dfc14c6cbccb9d01"
      },
      "id": "dfc14c6cbccb9d01",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "import os\n",
        "import time\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from PIL import Image, UnidentifiedImageError\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D, BatchNormalization\n",
        "from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
        "from tensorflow.keras.regularizers import l2\n",
        "from sklearn.metrics import classification_report, roc_auc_score"
      ],
      "metadata": {
        "id": "c00e721dc89fa4a"
      },
      "id": "c00e721dc89fa4a",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "train_dir = \"Normal vs Military Vehicles/train\"\n",
        "val_dir = \"Normal vs Military Vehicles/validation\"\n",
        "test_dir = \"Normal vs Military Vehicles/test\"\n",
        "\n",
        "weights_path = \"resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\""
      ],
      "metadata": {
        "id": "4333dfbc32c9df90"
      },
      "id": "4333dfbc32c9df90",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "def safe_load_img(filepath, target_size):\n",
        "    try:\n",
        "        img = Image.open(filepath)\n",
        "        img = img.convert(\"RGB\")\n",
        "        img = img.resize(target_size)\n",
        "        return img\n",
        "    except (UnidentifiedImageError, OSError, ValueError) as e:\n",
        "        print(f\"Skipping corrupted image: {filepath} ({e})\")\n",
        "        return None\n",
        "\n",
        "def get_data_generators(train_dir, val_dir, test_dir, image_size=224, batch_size=16):\n",
        "    data_generator = ImageDataGenerator(\n",
        "        preprocessing_function=preprocess_input,\n",
        "        rotation_range=20,\n",
        "        width_shift_range=0.2,\n",
        "        height_shift_range=0.2,\n",
        "        zoom_range=0.2,\n",
        "        horizontal_flip=True,\n",
        "        fill_mode='nearest'\n",
        "    )\n",
        "\n",
        "    train_generator = data_generator.flow_from_directory(\n",
        "        train_dir,\n",
        "        target_size=(image_size, image_size),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical'\n",
        "    )\n",
        "\n",
        "    val_generator = data_generator.flow_from_directory(\n",
        "        val_dir,\n",
        "        target_size=(image_size, image_size),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical'\n",
        "    )\n",
        "\n",
        "    test_generator = data_generator.flow_from_directory(\n",
        "        test_dir,\n",
        "        target_size=(image_size, image_size),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical',\n",
        "        shuffle=False\n",
        "    )\n",
        "\n",
        "    return train_generator, val_generator, test_generator\n",
        "\n",
        "train_generator, validation_generator, test_generator = get_data_generators(train_dir, val_dir, test_dir)\n",
        "\n",
        "def build_resnet50_model(input_shape=(224, 224, 3)):\n",
        "    base_model = ResNet50(include_top=False, weights=weights_path, input_shape=input_shape)\n",
        "\n",
        "    for layer in base_model.layers:\n",
        "        layer.trainable = False\n",
        "\n",
        "    model = Sequential()\n",
        "    model.add(base_model)\n",
        "    model.add(GlobalAveragePooling2D())\n",
        "    model.add(BatchNormalization())\n",
        "    model.add(Dense(512, activation='relu', kernel_regularizer=l2(0.001)))\n",
        "    model.add(Dropout(0.5))\n",
        "    model.add(Dense(2, activation='softmax'))\n",
        "\n",
        "    return model\n",
        "\n",
        "model = build_resnet50_model()\n",
        "\n",
        "optimizer = Adam(learning_rate=0.001)\n",
        "\n",
        "model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, min_lr=1e-6, verbose=1)\n",
        "\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "steps_per_epoch = train_generator.n // train_generator.batch_size\n",
        "validation_steps = validation_generator.n // validation_generator.batch_size\n",
        "\n",
        "history = model.fit(\n",
        "    train_generator,\n",
        "    steps_per_epoch=steps_per_epoch,\n",
        "    epochs=30,\n",
        "    validation_data=validation_generator,\n",
        "    validation_steps=validation_steps,\n",
        "    callbacks=[early_stopping, reduce_lr],\n",
        ")\n",
        "\n",
        "end_time = time.time()\n",
        "training_time_seconds = end_time - start_time\n",
        "training_time_minutes = training_time_seconds / 60\n",
        "\n",
        "print(f\"Total training time: {training_time_seconds:.2f} seconds ({training_time_minutes:.2f} minutes)\")\n",
        "\n",
        "model.save(\"ResNet50_model_03.keras\")"
      ],
      "metadata": {
        "id": "284501c34b9729d2"
      },
      "id": "284501c34b9729d2",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "results = model.evaluate(test_generator)\n",
        "print(f\"Test Accuracy: {results[1]:.4f}\")\n",
        "\n",
        "y_true = test_generator.classes\n",
        "\n",
        "y_pred = model.predict(test_generator)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "\n",
        "print(classification_report(y_true, y_pred_classes))\n",
        "\n",
        "roc_auc = roc_auc_score(y_true, y_pred[:, 1])\n",
        "print(f'ROC-AUC: {roc_auc}')"
      ],
      "metadata": {
        "id": "47c15f1e4fe4eb7e"
      },
      "id": "47c15f1e4fe4eb7e",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "model.save(\"ResNet50_model_03.h5\")"
      ],
      "metadata": {
        "id": "fb7cfc2f6d901cab"
      },
      "id": "fb7cfc2f6d901cab",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "6e5799502dc60ae3"
      },
      "id": "6e5799502dc60ae3",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "8bd1731d65c5ee3b"
      },
      "id": "8bd1731d65c5ee3b",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "97aa197f3ee4ea12"
      },
      "id": "97aa197f3ee4ea12",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "# FOURTH MODEL"
      ],
      "metadata": {
        "id": "b54bb6ce5c43246e"
      },
      "id": "b54bb6ce5c43246e",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "5adc27a83afbd7e2"
      },
      "id": "5adc27a83afbd7e2",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [
        "import os\n",
        "import time\n",
        "import numpy as np\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D\n",
        "from tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.callbacks import EarlyStopping\n",
        "from tensorflow.keras.regularizers import l2\n",
        "from sklearn.utils.class_weight import compute_class_weight\n",
        "\n",
        "\n",
        "\n",
        "train_dir = \"Normal_vs_Military_Vehicles/train\"\n",
        "val_dir = \"Normal_vs_Military_Vehicles/validation\"\n",
        "test_dir = \"Normal_vs_Military_Vehicles/test\"\n",
        "\n",
        "weights_path = \"resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5\""
      ],
      "metadata": {
        "id": "3c8ac69cdcdd618f"
      },
      "id": "3c8ac69cdcdd618f",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Found 12407 images belonging to 2 classes.\n",
            "Found 3437 images belonging to 2 classes.\n",
            "Found 2766 images belonging to 2 classes.\n",
            "Epoch 1/30\n",
            "775/775 [==============================] - 268s 343ms/step - loss: 0.5089 - accuracy: 0.9316 - val_loss: 0.2763 - val_accuracy: 0.9629\n",
            "Epoch 2/30\n",
            "775/775 [==============================] - 264s 341ms/step - loss: 0.2303 - accuracy: 0.9550 - val_loss: 0.1752 - val_accuracy: 0.9743\n",
            "Epoch 3/30\n",
            "775/775 [==============================] - 262s 338ms/step - loss: 0.1784 - accuracy: 0.9604 - val_loss: 0.1474 - val_accuracy: 0.9778\n",
            "Epoch 4/30\n",
            "775/775 [==============================] - 261s 337ms/step - loss: 0.1635 - accuracy: 0.9602 - val_loss: 0.1574 - val_accuracy: 0.9690\n",
            "Epoch 5/30\n",
            "775/775 [==============================] - 262s 337ms/step - loss: 0.1504 - accuracy: 0.9640 - val_loss: 0.1285 - val_accuracy: 0.9790\n",
            "Epoch 6/30\n",
            "775/775 [==============================] - 262s 338ms/step - loss: 0.1423 - accuracy: 0.9653 - val_loss: 0.1363 - val_accuracy: 0.9743\n",
            "Epoch 7/30\n",
            "775/775 [==============================] - 262s 338ms/step - loss: 0.1347 - accuracy: 0.9668 - val_loss: 0.1279 - val_accuracy: 0.9766\n",
            "Epoch 8/30\n",
            "775/775 [==============================] - 383s 494ms/step - loss: 0.1370 - accuracy: 0.9642 - val_loss: 0.1305 - val_accuracy: 0.9761\n",
            "Epoch 9/30\n",
            "775/775 [==============================] - 478s 617ms/step - loss: 0.1347 - accuracy: 0.9642 - val_loss: 0.1485 - val_accuracy: 0.9714\n",
            "Epoch 10/30\n",
            "775/775 [==============================] - 472s 609ms/step - loss: 0.1315 - accuracy: 0.9657 - val_loss: 0.1321 - val_accuracy: 0.9743\n",
            "Epoch 11/30\n",
            "775/775 [==============================] - 264s 340ms/step - loss: 0.1258 - accuracy: 0.9668 - val_loss: 0.1118 - val_accuracy: 0.9790\n",
            "Epoch 12/30\n",
            "775/775 [==============================] - 262s 338ms/step - loss: 0.1251 - accuracy: 0.9655 - val_loss: 0.1484 - val_accuracy: 0.9688\n",
            "Epoch 13/30\n",
            "775/775 [==============================] - 263s 339ms/step - loss: 0.1295 - accuracy: 0.9649 - val_loss: 0.1136 - val_accuracy: 0.9784\n",
            "Epoch 14/30\n",
            "775/775 [==============================] - 261s 337ms/step - loss: 0.1243 - accuracy: 0.9697 - val_loss: 0.1146 - val_accuracy: 0.9796\n",
            "Epoch 15/30\n",
            "775/775 [==============================] - 263s 339ms/step - loss: 0.1184 - accuracy: 0.9700 - val_loss: 0.1299 - val_accuracy: 0.9688\n",
            "Epoch 16/30\n",
            "775/775 [==============================] - 263s 339ms/step - loss: 0.1228 - accuracy: 0.9685 - val_loss: 0.1145 - val_accuracy: 0.9790\n",
            "Total training time: 4750.96 seconds (79.18 minutes)\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/home/up2212278/.local/lib/python3.6/site-packages/keras/utils/generic_utils.py:497: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.\n",
            "  category=CustomMaskWarning)\n"
          ]
        }
      ],
      "source": [
        "def get_data_generators(train_dir, val_dir, test_dir, image_size=224, batch_size=16):\n",
        "    data_generator = ImageDataGenerator(preprocessing_function=preprocess_input)\n",
        "\n",
        "    train_generator = data_generator.flow_from_directory(\n",
        "        train_dir,\n",
        "        target_size=(image_size, image_size),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical'\n",
        "    )\n",
        "\n",
        "    validation_generator = data_generator.flow_from_directory(\n",
        "        val_dir,\n",
        "        target_size=(image_size, image_size),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical'\n",
        "    )\n",
        "\n",
        "    test_generator = data_generator.flow_from_directory(\n",
        "        test_dir,\n",
        "        target_size=(image_size, image_size),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='categorical'\n",
        "    )\n",
        "\n",
        "    return train_generator, validation_generator, test_generator\n",
        "\n",
        "train_generator, validation_generator, test_generator = get_data_generators(train_dir, val_dir, test_dir)\n",
        "\n",
        "def build_resnet50_model(input_shape=(224, 224, 3)):\n",
        "    base_model = ResNet50(include_top=False, weights=weights_path, input_shape=input_shape)\n",
        "    base_model.trainable = False\n",
        "\n",
        "    model = Sequential()\n",
        "    model.add(base_model)\n",
        "    model.add(GlobalAveragePooling2D())\n",
        "    model.add(Dense(512, activation='relu', kernel_regularizer=l2(0.001)))\n",
        "    model.add(Dropout(0.5))\n",
        "    model.add(Dense(2, activation='softmax'))\n",
        "\n",
        "    return model\n",
        "\n",
        "model = build_resnet50_model()\n",
        "\n",
        "class_weight_dict = {0: 1.0, 1: 0.7}\n",
        "\n",
        "optimizer = Adam(learning_rate=0.001)\n",
        "model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
        "\n",
        "steps_per_epoch = train_generator.n // train_generator.batch_size\n",
        "validation_steps = validation_generator.n // validation_generator.batch_size\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "history = model.fit(\n",
        "    train_generator,\n",
        "    steps_per_epoch=steps_per_epoch,\n",
        "    epochs=30,\n",
        "    validation_data=validation_generator,\n",
        "    validation_steps=validation_steps,\n",
        "    class_weight=class_weight_dict,\n",
        "    callbacks=[early_stopping],\n",
        ")\n",
        "\n",
        "end_time = time.time()\n",
        "training_time_seconds = end_time - start_time\n",
        "training_time_minutes = training_time_seconds / 60\n",
        "\n",
        "print(f\"Total training time: {training_time_seconds:.2f} seconds ({training_time_minutes:.2f} minutes)\")\n",
        "\n",
        "model.save(\"ResNet50_model_04_class_weight_jupiter.h5\")"
      ],
      "metadata": {
        "id": "271bdc2e1c49a013",
        "outputId": "4f58a851-2e92-4de3-f6d9-c6e64bf74227"
      },
      "id": "271bdc2e1c49a013",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "173/173 [==============================] - 48s 271ms/step - loss: 0.1393 - accuracy: 0.9649\n",
            "Test Accuracy: 0.9649\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.96      0.96      0.96      1255\n",
            "           1       0.97      0.97      0.97      1511\n",
            "\n",
            "    accuracy                           0.96      2766\n",
            "   macro avg       0.96      0.96      0.96      2766\n",
            "weighted avg       0.96      0.96      0.96      2766\n",
            "\n",
            "ROC-AUC: 0.995356759592998\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "results = model.evaluate(test_generator)\n",
        "print(f\"Test Accuracy: {results[1]:.4f}\")\n",
        "\n",
        "y_true = test_generator.classes\n",
        "\n",
        "y_pred = model.predict(test_generator)\n",
        "y_pred_classes = np.argmax(y_pred, axis=1)\n",
        "\n",
        "print(classification_report(y_true, y_pred_classes))\n",
        "\n",
        "roc_auc = roc_auc_score(y_true, y_pred[:, 1])\n",
        "print(f'ROC-AUC: {roc_auc}')\n",
        "\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Training and Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "3dfaddd0f82f23e6",
        "outputId": "3285357d-7a36-475f-d2e2-51818fecccc9"
      },
      "id": "3dfaddd0f82f23e6",
      "execution_count": null
    },
    {
      "cell_type": "code",
      "outputs": [],
      "source": [],
      "metadata": {
        "id": "6c62b475a8c1d07e"
      },
      "id": "6c62b475a8c1d07e",
      "execution_count": null
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.10"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
